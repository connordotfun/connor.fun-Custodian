- name: Initialize an EC2 Cluster for data.connor.fun
  hosts: local
  
  vars_files:
    - keys.yaml
    - security_groups.yaml
    - machines.yaml
    - config.yaml

  tasks:

    # ==== Begin Rule and Key Generation ====

    - name: Get Base AMI ID
      ec2_ami_facts:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        region: "{{region}}"
        owners: amazon
        filters:
          "name": "amzn2-ami-hvm-2017.12.0.20180115-x86_64-gp2"
      register: base_ami

    - name: Save AMI ID for generic linux
      set_fact:
        gen_ami_id: "{{base_ami['images'][0]['image_id']}}"

    - name: Create necessary security group for cluster
      ec2_group:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        name: "{{item.name}}"
        description: "{{item.description}}"
        region: "{{region}}"
        rules: "{{item.rules}}"
        tags: "{{item.tags}}"
      loop: "{{ security_groups }}"
      register: Security_Response

    #- debug:
    #   msg: "{{Security_Response}}"

    - name: Create ssh key for machines
      ec2_key:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        name: "{{ssh_key_name}}"
        region: "{{region}}"
      register: SSHKey_Response

    #- debug:
    #    msg: "{{SSHKey_Response}}"

    - name: Save .pem file to local directory
      copy: 
        content: "{{SSHKey_Response['key']['private_key']}}"
        dest: "{{ssh_key_name + '.pem'}}"

    - name: Save the name of SSHKeyname file
      set_fact:
        SSHKey_filename: "{{ssh_key_name + '.pem'}}"

    # ==== Initialize Custodian and AMI ====

    - name: Create Custodian/Base machine for AMI
      ec2:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        key_name: "{{ssh_key_name}}"
        group: "{{Custodian.group}}"
        instance_type: "{{Custodian.instance_type}}"
        image: "{{gen_ami_id}}"
        wait: true
        region: "{{region}}"
        instance_tags: "{{Custodian.tags}}"
      register: Custodian_Response

    #- debug:
    #    msg: "{{Custodian_Response['instances'][0]['public_ip']}}"

    - name: Save Custodian ip into Custodian_IP
      set_fact:
        Custodian_IP: "{{Custodian_Response['instances'][0]['public_ip']}}"
        Custodian_ID: "{{Custodian_Response['instances'][0]['id']}}"

    #- debug:
    #    msg: This is the Custodian_IP "{{Custodian_IP}}"

    - name: Add a Custodian as host to memory with Custodian_IP
      add_host:
        hostname: "{{Custodian_IP}}"
        ansible_ssh_private_key_file: "connor.fun.pem"
        group: Custodian_Host
        ansible_user: ec2-user

    - name: Wait for SSH to come up
      wait_for:
        host={{ Custodian_IP }} 
        port=22 
        state=started

    - name: Unarchive the Apache-Storm files
      unarchive:
          dest: /home/ec2-user
          src: apache-storm-1.2.1.tar.gz
      delegate_to: "{{Custodian_IP}}"

    - name: Unarchive the Zookeeper files
      unarchive:
          dest: /home/ec2-user
          src: zookeeper-3.4.11.tar.gz
      delegate_to: "{{Custodian_IP}}"

    - name: Create data directory in Zookeeper
      file:
        path: /home/ec2-user/zookeeper-3.4.11/data
        state: directory
      delegate_to: "{{Custodian_IP}}"

    # Create an AMI out of the Custodian

    - name: Create an AMI of the Custodian Machine
      ec2_ami:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        instance_id: "{{Custodian_ID}}"
        wait: yes
        name: connor.fun-AMI
        region: "{{region}}"
        tags:
          Name: connor.fun-AMI
          "Team Name": connor.fun
      register: AMI_Response

    #- debug:
    #    msg: "{{AMI_Response}}"

    - name: Save Custodian AMI ID into Custodian_AMI
      set_fact:
        Custodian_AMI: "{{AMI_Response['image_id']}}"


    - name: Create Worker Machines for Storm
      ec2:
        aws_access_key: "{{aws_auth.access}}"
        aws_secret_key: "{{aws_auth.secret}}"
        key_name: "{{ssh_key_name}}"
        group: "{{Worker.group}}"
        instance_type: "{{Worker.instance_type}}"
        image: "{{Custodian_AMI}}"
        region: "{{region}}"
        count: "{{Worker.count}}"
        instance_tags: "{{Worker.tags}}"
      register: Worker_Response
    
    - debug:
        msg: "{{Worker_Response}}"

    - name: Wait for SSH to come up
      wait_for:
        host={{ item.public_ip }} 
        port=22 
        state=started
      with_items: Worker_Response['instances']